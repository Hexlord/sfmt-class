cmake_minimum_required(VERSION 3.1)
project(sfmt
  VERSION 0.5.0
  LANGUAGES C CXX)

include(GNUInstallDirs)
set(CMAKE_VERBOSE_MAKEFILE TRUE)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
set(CMAKE_C_FLAGS_DEV "-O2 -g")
set(CMAKE_CXX_FLAGS_DEV "-O2 -g")
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_CXX_EXTENSIONS FALSE)

message(STATUS "CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
if(${CMAKE_INSTALL_PREFIX} MATCHES linuxbrew)
  set(CMAKE_INSTALL_LIBDIR lib)
endif()

set(MEXP 19937)
add_library(obj OBJECT SFMT/SFMT.c)
target_compile_options(obj PRIVATE
  -march=native -Wall -Wextra -Wpedantic
)
target_compile_definitions(obj PRIVATE
  -DHAVE_SSE2 -DSFMT_MEXP=${MEXP}
)
set_target_properties(obj PROPERTIES POSITION_INDEPENDENT_CODE TRUE)

add_library(${PROJECT_NAME} SHARED $<TARGET_OBJECTS:obj>)
add_library(wtl::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
target_include_directories(${PROJECT_NAME}
  INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}>
)
add_library(${PROJECT_NAME}-static STATIC $<TARGET_OBJECTS:obj>)
set_target_properties(${PROJECT_NAME}-static PROPERTIES
  OUTPUT_NAME ${PROJECT_NAME}
)

set(CONFIG_VERSION_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake)
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
  ${CONFIG_VERSION_FILE} COMPATIBILITY AnyNewerVersion
)

install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}-static
  EXPORT ${PROJECT_NAME}-config
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
install(FILES sfmt.hpp
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
install(FILES SFMT/SFMT.h SFMT/SFMT-params.h SFMT/SFMT-params${MEXP}.h
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/SFMT
)
install(EXPORT ${PROJECT_NAME}-config
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}
  NAMESPACE wtl::
)
install(FILES ${CONFIG_VERSION_FILE}
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}
)

include(CTest)
if(BUILD_TESTING)
  add_subdirectory(test)
endif()
